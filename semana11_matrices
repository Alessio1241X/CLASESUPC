//GENERAR ARREGLO 2D(CUADRADO)
#include<iostream>
#define COLUMNAS 5
#define FILAS 6

using namespace std;
int main() {

	srand(time(NULL));//generar la semilla aleatoria
	int M[FILAS][COLUMNAS];//Crea un arreglo2D
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			M[i][j] = 1 + rand() % 9;//asignar un valor
			cout << M[i][j] << " ";//imprimir el valor
		}
		cout << endl;//salto de linea
	}
	return 0;
}
//EL MISMO EJERCICIO PERO FUNCIONES
#include<iostream>
#define COLUMNAS 5
#define FILAS 6

using namespace std;

void generar(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			A[i][j] = 1 + rand() % 9;//asignar un valor
		}
	}
}
void imprimir(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
}
int main() {
	srand(time(NULL));//generar la semilla aletoria
	int M[FILAS][COLUMNAS];//crear un arreglo
	generar(M);
	imprimir(M);
}
//EL MISMO EJERCICIO PERO FUNCIONES
#include<iostream>
#define COLUMNAS 5
#define FILAS 6

using namespace std;

void generar(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			A[i][j] = 1 + rand() % 9;//asignar un valor
		}
	}
}
void imprimir(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
}
int buscar_veces(int A[FILAS][COLUMNAS], int valor) {
	int cont = 0;//contador
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			//si encontramos el valor
			//cont aumenta en 1
			if (A[i][j] == valor) {
				cont++;
			}
		}
	}
	return cont;
}
//EL MISMO EJERCICIO PERO FUNCIONES(HALLR UN NUMERO)
#include<iostream>
#define COLUMNAS 5
#define FILAS 6

using namespace std;

void generar(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			A[i][j] = 1 + rand() % 9;//asignar un valor
		}
	}
}
void imprimir(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
}
int buscar_veces(int A[FILAS][COLUMNAS], int valor) {
	int cont = 0;//contador
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			//si encontramos el valor
			//cont aumenta en 1
			if (A[i][j] == valor) {
				cont++;
			}
		}
	}
	return cont;
}
int main() {
	
	srand(time(NULL));//generar la semilla aletoria
	int M[FILAS][COLUMNAS];//crear un arreglo
	generar(M);
	imprimir(M);
	int valor = 7;
	int cont = buscar_veces(M, valor);
	cout << "El numero " << valor << " aparece ";
	cout << cont << " veces";
}

//EL MISMO EJERCICIO PERO FUNCIONES(TACHANDO NUMEROS QUE SALGAN)
#include<iostream>
#define COLUMNAS 5
#define FILAS 6

using namespace std;

void generar(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			A[i][j] = 1 + rand() % 9;//asignar un valor
		}
	}
}
void imprimir(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
}
void imprimir2(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			if (A[i][j] == 7) {
				cout << "# ";
			}
			else {
				cout << "- ";
			}
		}
		cout << endl;
	}
}
int buscar_veces(int A[FILAS][COLUMNAS], int valor) {
	int cont = 0;//contador
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			//si encontramos el valor
			//cont aumenta en 1
			if (A[i][j] == valor) {
				cont++;
			}
		}
	}
	return cont;
}
int main() {
	
	srand(time(NULL));//generar la semilla aletoria
	int M[FILAS][COLUMNAS];//crear un arreglo
	generar(M);
	imprimir2(M);
	int valor = 7;
	int cont = buscar_veces(M, valor);
	cout << "El numero " << valor << " aparece ";
	cout << cont << " veces";
}
//EL MISMO EJERCICIO PERO FUNCIONES y MAYOR Y MENOR
#include<iostream>
#define COLUMNAS 5
#define FILAS 6

using namespace std;

void generar(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			A[i][j] = 1 + rand() % 9;//asignar un valor
		}
	}
}
void imprimir(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
}
void imprimir2(int A[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {//recorro filas
		for (int j = 0; j < COLUMNAS; j++) {//columnas
			if (A[i][j] == 7) {
				cout << "# ";
			}
			else {
				cout << "- ";
			}
		}
		cout << endl;
	}
}
int Mayor(int A[FILAS][COLUMNAS]) {
	int mayor = A[0][0];
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			if (A[i][j] >mayor ) {
				mayor = A[i][j];
			}
		}
	}
	return mayor;
}
int Menor(int A[FILAS][COLUMNAS]) {
	int menor = A[0][0];
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			if (A[i][j] < menor) {
				menor = A[i][j];
			}
		}
	}
	return menor;
}

int Frecuencia(int A[FILAS][COLUMNAS]) {
	int mass = 0;
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			if (A[i][j] > mass && A[i][j] < mass&& mass== A[i][j]) {
				
			}
		}
		return mass;
	}
}
int buscar_veces(int A[FILAS][COLUMNAS], int valor) {
	int cont = 0;//contador
	for (int i = 0; i < FILAS; i++) {//recorro por filas
		for (int j = 0; j < COLUMNAS; j++) {//recorro por columnas
			//si encontramos el valor
			//cont aumenta en 1
			if (A[i][j] == valor) {
				cont++;
			}
		}
	}
	return cont;
}
int main() {
	
	srand(time(NULL));//generar la semilla aletoria
	int M[FILAS][COLUMNAS];//crear un arreglo
	generar(M);
	imprimir(M);
	
	int valor = 7;
	int cont = buscar_veces(M, valor);
	cout << "El numero " << valor << " aparece ";
	cout << cont << " veces" << endl;
	cout << "El numero mayor es: " << Mayor(M) << endl;
	cout<<"El numero menor es: "<< Menor(M);
	
}
//CODIGO DEL PROFE
#include <iostream>
#define COLUMNAS 5
#define FILAS 6
using namespace std;

void generar(int A[FILAS][COLUMNAS]) {
    for (int i = 0; i < FILAS; i++) { // recorro filas
        for (int j = 0; j < COLUMNAS; j++) { //columnas
            A[i][j] = 1 + rand() % 9; // asignar un valor
        }
    }
}

void imprimr(int A[FILAS][COLUMNAS]) {
    for (int i = 0; i < FILAS; i++) { // recorro filas
        for (int j = 0; j < COLUMNAS; j++) { //columnas
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
}

void imprimir2(int A[FILAS][COLUMNAS]) {
    for (int i = 0; i < FILAS; i++) { // recorro filas
        for (int j = 0; j < COLUMNAS; j++) { //columnas
            if (A[i][j] == 7) {
                cout << "# ";
            }
            else {
                cout << "- ";
            }
        }
        cout << endl;
    }
}

int Mayor(int A[FILAS][COLUMNAS]) {
    int mayor = A[0][0];
    for (int i = 0; i < FILAS; i++) {
        for (int j = 0; j < COLUMNAS; j++) {
            if (mayor < A[i][j]) {
                mayor = A[i][j];
            }
        }
    }
    return mayor;
}

float Promedio(int A[FILAS][COLUMNAS]) {
    float promedio = 0;
    for (int i = 0; i < FILAS; i++) {
        for (int j = 0; j < COLUMNAS; j++) {
            promedio += A[i][j];
        }
    }
    promedio /= (FILAS * COLUMNAS);
    return promedio;
}

int Frecuencia(int A[FILAS][COLUMNAS]) {
    int frecuencias[10]; // creo mi arrelgo
    for (int i = 0; i < 10; i++) {
        frecuencias[i] = 0; // lo inicio en 0
    }
    for (int i = 0; i < FILAS; i++) { // recorro la matriz
        for (int j = 0; j < COLUMNAS; j++) {
            for (int k = 1; k < 10; k++) { // recorro mis frecuencias
                if (A[i][j] == k) { // si k es 
                    frecuencias[k]++;
                }
            }
        }
    }
    int mayor = 0;
    int indice = 0;
    for (int i = 0; i < 10; i++) {
        if (mayor < frecuencias[i]) {
            mayor = frecuencias[i];
            indice = i;
        }
    }
    return indice;
}

int buscar_veces(int A[FILAS][COLUMNAS], int v) {
    int veces = 0; // contador
    for (int i = 0; i < FILAS; i++) { // recorro por filas
        for (int j = 0; j < COLUMNAS; j++) {
            // si encontramos el valor,
            // veces aumenta en 1 
            if (A[i][j] == v) veces++;
        }
    }
    return veces;
}
int main()
{
    srand(time(NULL)); // generar la semilla aleatoria
    int M[FILAS][COLUMNAS]; // Crear un arreglo2D
    generar(M); // generar los valores
    imprimr(M); // mostrar los valores
    int f = Frecuencia(M);
    cout << "El numero que mas se repite es ";
    cout << f << endl;
    cout << "El promedio es: " << Promedio(M);
}

#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

const int FILAS = 8;
const int COLUMNAS = 8;

void generar_matriz(int matriz[FILAS][COLUMNAS]) {
	for (int i = 0; i < FILAS; i++) {
		for (int j = 0; j < COLUMNAS; j++) {
			matriz[i][j] = 1 + rand() % 7;
		}
	}
}

int main() {
	srand(time(NULL));

	int matriz_buscaminas[FILAS][COLUMNAS];
	int resultado[FILAS][COLUMNAS];

	generar_matriz(matriz_buscaminas);

	// Calcular nÃºmeros alrededor de cada celda
	for (int y = 0; y < FILAS; y++) {
		for (int x = 0; x < COLUMNAS; x++) {
			if (matriz_buscaminas[y][x] == 7) {
				resultado[y][x] = 7;
				continue;
			}

			int minas = 0;
			// Revisar celdas alrededor
			for (int i = y - 1; i <= y + 1; i++) {
				for (int j = x - 1; j <= x + 1; j++) {
					if (i >= 0 && i < FILAS && j >= 0 && j < COLUMNAS) {
						if (i != y || j != x) {
							if (matriz_buscaminas[i][j] == 7) minas++;
						}
					}
				}
			}
			resultado[y][x] = minas;
		}
	}

	// Mostrar resultado
	for (int i = 0; i < FILAS; i++) {
		cout << "\t\t\t";
		for (int j = 0; j < COLUMNAS; j++) {
			if (resultado[i][j] == 7)
				cout << "# ";
			else
				cout << resultado[i][j] << " ";
		}
		cout << endl;
	}

	return 0;
}

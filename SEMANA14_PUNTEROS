#include<iostream>
using namespace std;
int main() {

	int* numero = new int;
	//creando la variable
	//en memoria dinamico
	//crear un puntero a un entero y llamarlo numero

	*numero = 5;
	cout << "El valor del numero es: " << *numero;
	//mostramos el valor
	cout << "\nSu direccion es: " << numero;
	//la direccion de memoria a la que apunta  
	delete[]numero;
	//eliminar la asignacion de valor
  //en memoria dinamica    

	return 0;
}
/*Delete
delete permite liberar la memoria reservada con new.
SIEMPRE que exista un new debe existir un delete
correspondiente.*/
#include<iostream>
using namespace std;
int main() {

	int* numero = new int[5];
	*numero = 5;

	if (numero == NULL) {
		cout << "No se pudo inicializar la variable :(";
	}
	else {
		cout << "Se puede inicializar :)";
	}

	return 0;
}

     #include<iostream>
using namespace std;
int main() {

	int N;
	cout << "Ingrese el total de estudiantes: "; cin >> N;
	int notas_estudiantes[N];//ESTATICA
	
	int* notas_est_dinamica;
	notas_est_dinamica = new int[N];//DINAMICA	

	return 0;
}
     
//EJERCICIO CON FUNCIONES Y PUNTEROS(codigo mio)
#include<iostream>
using namespace std;

struct Estudiante {
	string nombre;
	int edad;
};
void EdadMayor(Estudiante* e, int N, int* mayoredad) {
	int mayor = e[0].edad;
	for (int i = 0; i < N; i++) {
		if (e[i].edad > mayor) {
			mayor = e[i].edad;
		}
	}
	*mayoredad = mayor;
}
void EdadMenor(Estudiante* e, int N, int* menoredad) {
	int menor = e[0].edad;
	for (int i = 0; i < N; i++) {
		if (e[i].edad < menor) {
			menor = e[i].edad;
		}
	}
	*menoredad = menor;
}
void HallarPromedio(Estudiante* e, int N, float* promedio) {
	float prom = 0;
	for (int i = 0; i < N; i++) {
		prom += e[i].edad;
	}
	prom /= N;
	*promedio = prom;
}
int main() {
	int N;
	cout << "Ingrese el numero de estudiantes: "; cin >> N;
	Estudiante* estudiantes = new Estudiante [N];

	for (int i = 0; i < N; i++) {
		cout << "Ingrese su nombre: "; cin >>estudiantes[i].nombre;
		cout << "Ingrese su edad: "; cin >>estudiantes[i].edad ;
	}
	float* promedio = new float;

	int* mayoredad = new int;

	int* menoredad = new int;

	HallarPromedio(estudiantes, N, promedio);

	EdadMayor(estudiantes, N, mayoredad);

	EdadMenor(estudiantes, N, menoredad);
	cout << "\nEl promedio es: "<<*promedio;
	cout << "\nLa edad mayor es: "<<*mayoredad;
	cout << "\nLa edad menor es: "<<*menoredad;

	return 0;
}

//MISMO EJERCICIO (estilo del profe)
#include <iostream>
using namespace std;
struct Estudiante {
	string nombre;
	int edad;
};
float PomedioEstudiantes(Estudiante* e, int N) {
	float prom = 0;
	for (int i = 0; i < N; i++) {
		prom += e[i].edad;
	}
	prom /= N;
	return prom;
}
void CalculosPromMayor(Estudiante* e, int N, float *p, int *m) {
	// e-> el arreglo de estudiantes en mem. dinámica
	// N-> un entero, p y m -> mem. dinámica (punteros)
	float prom = 0; // prom cálculos de promedio
	int mayor = e[0].edad; // asumo que es el mayor
	for (int i = 0; i < N; i++) { // recorrer el arreglo de estudiantes
		if (mayor < e[i].edad) { // si mayor es menor que otra edad
			mayor = e[i].edad; // actualizo el valor de mayor
		}
		prom += e[i].edad; // prom acumula la edad
	}
	prom /= N; // terminar el cálculo de promedio
	*p = prom; // asignacion de variable prom a p
	*m = mayor; // modificar el valor de m con el valor de mayor
}
int main()
{
	int N;
	cout << "Ingrese el numero de estudiantes: ";
	cin >> N;
	Estudiante* estudiantes = new Estudiante[N];
	for (int i = 0; i < N; i++) {
		cout << "Ingrese el nombre: "; cin >> estudiantes[i].nombre;
		cout << "Ingrese la edad: "; cin >> estudiantes[i].edad;
	}
	int* mayor = new int; // ambas sin asignar un valor
	float* promedio = new float;
	// funcion que halle la edad mayor
	// funcion que halle la edad promedio
	CalculosPromMayor(estudiantes, N, promedio, mayor);
	// RETO: juntarlo todo en una sola funcion
	// HINT: utilizar memoria dinámica
	cout << "El promedio es: " << *promedio;
	cout << "\nLa mayor edad es: " << *mayor;
}
//VER EL CODIGO
#include <iostream>
using namespace std;
struct Partidos {
	string Equipolocal;
	string Equipovisita;
	int goleslocal;
	int golesvisita;
};
void Mayorgoles(Partidos* e, int N, string* mayorgol) {
	int goles_A = 0, goles_B = 0, goles_C = 0;
	for (int i = 0; i < N; i++) {
	if (e[i].Equipolocal == "A") {
			goles_A += e[i].goleslocal;
	}
	if (e[i].Equipovisita == "A") {
			goles_A += e[i].golesvisita;
		}
	if (e[i].Equipolocal == "B") {
			goles_B += e[i].goleslocal;
	}
	if (e[i].Equipovisita == "B") {
		goles_B += e[i].golesvisita;
	}
	if (e[i].Equipolocal == "C") {
			goles_C += e[i].goleslocal;
	}
	if (e[i].Equipovisita == "C") {
		goles_C += e[i].golesvisita;
	}
	if (goles_A > goles_B && goles_A > goles_C) {
		*mayorgol = "A";
	}else if (goles_B > goles_C && goles_B > goles_A) {
		*mayorgol = "B";
	}else {
		*mayorgol = "C";
	}

	}
	
}
void Partidosempatados(Partidos* e, int N) {
	int empato_a = 0;
	int empato_b = 0;
	int empato_c = 0;
	for (int i = 0; i < N; i++) {

		if (e[i].Equipolocal == "A" and (e[i].goleslocal == e[i].golesvisita)) {
			empato_a++;

		}
		if (e[i].Equipolocal == "B" and (e[i].goleslocal == e[i].golesvisita)) {
			empato_b++;
		}
		if (e[i].Equipolocal == "C" and (e[i].goleslocal == e[i].golesvisita)) {
			empato_c++;
		}
	}
}

int main(){
	int N;
	cout << "Ingrese la cantidad de partidos jugados: "; cin >> N;
	Partidos* partidos = new Partidos[N];
	for (int i = 0; i < N; i++) {
		cout << i + 1 << ".PARTIDO" << endl;
		cout<<"Ingrese el nombre del equipo LOCAL: "; cin >> partidos[i].Equipolocal;
		cout << "Ingrese la cantidad de goles: "; cin >> partidos[i].goleslocal;
		cout<<"Ingrese el nombre del equipo VISITANTE: "; cin >> partidos[i].Equipovisita;
		cout << "Ingrese la cantidad de goles: "; cin >> partidos[i].golesvisita;
	}
	string* mayorgol = new string ;
	Mayorgoles(partidos, N, mayorgol);
	Partidosempatados(partidos, N);

	cout << "\nEl equipo con mayor cantidad de goles es: " << *mayorgol;
	cout << "\nEl equipo que mas empato es: " << *mayorgol;
	
	return 0;
}
